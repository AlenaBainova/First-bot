import aiogram
import os
import asyncio
import logging
import pandas as pd
import sys
import io
import button as kb
from dotenv import load_dotenv
from aiogram.enums import ParseMode
from aiogram import Bot, Dispatcher, F, Router, html
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InputFile
from aiogram.filters import CommandStart
from aiogram.methods.send_document import SendDocument

load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()
data = None
form_router = Router()

class Form(StatesGroup):
   name = State()

@form_router.message(CommandStart()) 
async def send_welcome(message: Message):
   await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à —Ñ–∞–π–ª Ecxel.")

@form_router.message(F.document)
async def take_doc(message: Message):
   
   doc = message.document.file_id
   print (doc)
   file = await bot.get_file(doc)
   file_path = file.file_path
   my_object = io.BytesIO()
   
   await message.answer("‚åõÔ∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ñ–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è\n")
      
   MyBinaryIO = await bot.download_file(file_path, my_object)
   global data
   try: # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –∑–∞–≥—Ä—É–∂. —Ñ–∞–π–ª–∞
      data = pd.read_excel(MyBinaryIO)
      print (data)
      expected_columns = ['–û—Ü–µ–Ω–∫–∞', '–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞','–ü–µ—Ä–∏–æ–¥', '–ì–æ–¥','–°–µ–º–µ—Å—Ç—Ä/–¢—Ä–∏–º–µ—Å—Ç—Ä', '–ö—É—Ä—Å', '–ß–∞—Å—Ç—å –≥–æ–¥–∞', '–£—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ç—Ä–æ–ª—è', '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', '–õ–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞', '–ì—Ä—É–ø–ø–∞', '–§–∞–∫—É–ª—å—Ç–µ—Ç', '–ü—Ä–æ–≥—Ä–∞–º–º–∞', '–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è', '–¢–∏–ø —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è']
      column_names = data.columns.tolist()
      if column_names == expected_columns:
         await message.answer(f'‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!', reply_markup=kb.main1)
      else:
         await message.answer(f'‚ö†  –§–∞–π–ª –∏–Ω–≤–∞–ª–∏–¥–Ω—ã–π.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑')
   except Exception as e:
      await message.answer(f"An error occurred: {str(e)}")
     
@form_router.message(F.text == '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø')
async def report(message: Message):
   grup = data['–ì—Ä—É–ø–ø–∞'].unique()
   grup_str = ', '.join(grup)
   print(grup_str)
   await message.answer(f'üë• –í –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –±–∞–∑–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–∏—Ö –≥—Ä—É–ø–ø–∞—Ö:\n {grup_str}', reply_markup=kb.main2)   

@form_router.message(F.text == '–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É')
async def report(message: Message, state: FSMContext) -> None:
   await state.set_state(Form.name)
   await message.answer(
        "‚å® –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: ",
        reply_markup=ReplyKeyboardRemove())

@form_router.message(Form.name)
async def process_name(message: Message, state: FSMContext) -> None:
   await state.update_data(name=message.text)
   skore = data['–ì—Ä—É–ø–ø–∞'].str.contains(str(message.text)).sum()
   if skore == 0:
      await message.answer(f'‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.', reply_markup=kb.main2)
   else:
      await message.answer(f'üìÑ –î–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ –≥—Ä—É–ø–ø–µ {html.quote(message.text)} –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç—á–µ—Ç" üëá', reply_markup=kb.report)

@dp.callback_query(F.data == 'otchet')
async def cbquantity(callback: CallbackQuery, state: FSMContext):
   group = await state.get_data()
   records = data.shape[0]
   marks = data['–ì—Ä—É–ø–ø–∞'].str.contains(group['name']).sum()
   group_student = data.loc[data['–ì—Ä—É–ø–ø–∞'] == group['name'],'–õ–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞'].unique()
   group_student_str = ', '.join(map(str, group_student)) 
   form_control = data['–£—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ç—Ä–æ–ª—è'].unique()
   form_control_str = ', '.join(map(str, form_control))
   years = data.loc[data['–ì—Ä—É–ø–ø–∞'] == group['name'],'–ì–æ–¥'].unique()
   years_str = ', '.join(map(str, years))
   student = len(data[data['–ì—Ä—É–ø–ø–∞'] == group['name']]['–õ–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞'].unique())
   await callback.message.answer(f'‚úîÔ∏è –í –∏—Å—Ö–æ–¥–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–ª–æ—Å—å {records} –æ—Ü–µ–Ω–æ–∫, –∏–∑ –Ω–∏—Ö {marks} –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ\n‚úîÔ∏è –í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –æ—Ü–µ–Ω–∫–∏ {student} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ª–∏—á–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏: {group_student_str}\n‚úîÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è: {form_control_str}\n‚úîÔ∏è –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —É—á–µ–±–Ω—ã–º –≥–æ–¥–∞–º: {years_str}')
   
   await callback.message.answer(f'–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–∞–≤–æ –≤–≤–µ–¥–∏—Ç–µ /start')

async def main():
   bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
   dp.include_router(form_router)
   await dp.start_polling(bot)

if __name__ == '__main__':
   logging.basicConfig(level=logging.INFO, stream=sys.stdout)
   asyncio.run(main())